{"version":3,"sources":["exampleData.js","businessRules.ts","components/alertBar.tsx","components/inputArea.tsx","components/colArea.tsx","App.js","reportWebVitals.js","index.tsx"],"names":["pyProjectData","regexList","dependencySpecification","regex","RegExp","canUpdateDependency","dependency","dependencies","i","length","test","push","join","discoveryDependencySpecification","includes","processDependency","section","version","pyProjectFileToml","tool","poetry","processPyProjectAndVersion","versions","currentDependenciesVersions","forEach","processDependencyList","map","value","replace","split","slice","getNameAndVersionOfEachDependency","filter","splitTextLinesIntoList","AlertBar","props","hasAlert","className","role","id","message","InputArea","labelId","slugify","title","lower","remove","textAreaId","htmlFor","onChange","rows","readOnly","ColArea","alertId","alertMessage","App","useState","pyProjectFile","SetPyProjectFile","newPyProjectFile","SetNewPyProjectFile","isPyProjectFileWithProblem","SetIsPyProjectFileWithProblem","SetVersions","useEffect","undefined","toml","parse","_","content","hasError","stringify","producePinnedVersions","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0cc4ec70.chunk.js","sourcesContent":["export const pyProjectData = `\n[tool.poetry]\nname = \"testing_poetry\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Bernardo Gomes <bgomesdeabreu@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\nrequests = \">=2.24.0\"\nurllib3 = \"*\"\nchardet = \">=1.0.0\"\ncertifi = \"<2020.12.5\"\n\n[tool.poetry.dev-dependencies]\nrequests = \"^2.24.0\"\npytest = \">=6.0.0\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n`;\n\nexport const versionsData = `\ncertifi  2020.12.5 Python package for providing Mozilla's CA Bundle.\nchardet  3.0.4     Universal encoding detector for Python 2 and 3\nidna  2.10      Internationalized Domain Names in Applications (IDNA)\nrequests 2.25.1    Python HTTP for Humans.\nurllib3  1.25.11   HTTP library with thread-safe connection pooling, file post, and more.\npytest  6.2.5   pytest simple powerful testing with Python\n`;\n","import toml from \"@iarna/toml\";\nimport {\n    ICurrentDependencyInfo,\n    IDependencySpecificationRegex,\n} from \"./models\";\n\nconst regexList: IDependencySpecificationRegex[] = [\n    { dependencySpecification: \">=\", regex: new RegExp(\"^>=\\\\w\") },\n    { dependencySpecification: \">\", regex: new RegExp(\"^>\\\\w\") },\n    { dependencySpecification: \"<=\", regex: new RegExp(\"^<=\\\\w\") },\n    { dependencySpecification: \"<\", regex: new RegExp(\"^<\\\\w\") },\n    { dependencySpecification: \"!=\", regex: new RegExp(\"^!=\\\\w\") },\n    { dependencySpecification: \"^\", regex: new RegExp(\"^\\\\^\\\\w\") },\n    { dependencySpecification: \"~\", regex: new RegExp(\"^~\\\\w\") },\n    { dependencySpecification: \"*\", regex: new RegExp(\"^\\\\*\") },\n];\n\nexport function discoveryDependencySpecification(dependency: string): string {\n    let dependencies = [];\n    for (let i = 0; i < regexList.length; i++) {\n        const { dependencySpecification, regex } = regexList[i];\n        if (regex.test(dependency)) {\n            dependencies.push(dependencySpecification);\n        }\n    }\n    return dependencies.join(\", \");\n}\n\nexport function canChangeDependencySpecification(\n    dependencyDiscovered: string,\n): boolean {\n    return [\">=\", \"*\"].includes(dependencyDiscovered);\n}\n\nexport function canUpdateDependency(dependency: string): boolean {\n    const dependencies = discoveryDependencySpecification(dependency);\n    return canChangeDependencySpecification(dependencies);\n}\n\nexport function removeEmptyString(list: string[]): string[] {\n    return list.filter((value: string) => !!value);\n}\n\nexport function splitTextLinesIntoList(versions: string): string[] {\n    return removeEmptyString(versions.split(\"\\n\"));\n}\n\nexport function getNameAndVersionOfEachDependency(\n    versions: string[],\n): ICurrentDependencyInfo[] {\n    return versions.map((value: string) => {\n        const [dependency, version] = value\n            .replace(/\\s+/g, \" \")\n            .split(\" \")\n            .slice(0, 2);\n        return { dependency, version };\n    });\n}\n\nexport function processDependency(\n    dependency: string,\n    section: string,\n    version: string,\n    pyProjectFileToml: any,\n): any {\n    if (\n        dependency in pyProjectFileToml.tool.poetry[section] &&\n        canUpdateDependency(pyProjectFileToml.tool.poetry[section][dependency])\n    ) {\n        pyProjectFileToml.tool.poetry[section][dependency] = `>=${version}`;\n    }\n\n    return pyProjectFileToml;\n}\n\nexport function processDependencyList(\n    pyProjectFileToml: any,\n    currentDependenciesVersions: ICurrentDependencyInfo[],\n): any {\n    currentDependenciesVersions.forEach(({ dependency, version }) => {\n        processDependency(\n            dependency,\n            \"dependencies\",\n            version,\n            pyProjectFileToml,\n        );\n        processDependency(\n            dependency,\n            \"dev-dependencies\",\n            version,\n            pyProjectFileToml,\n        );\n    });\n\n    return pyProjectFileToml;\n}\n\nexport function processPyProjectAndVersion(\n    pyProjectFileToml: any,\n    versions: string,\n): any {\n    const versionsList = getNameAndVersionOfEachDependency(\n        splitTextLinesIntoList(versions),\n    );\n    return processDependencyList(pyProjectFileToml, versionsList);\n}\n\nexport function producePinnedVersions(pyProjectFile: string, versions: string) {\n    let pyProjectFileToml = undefined;\n    let newPyProjectFile = undefined;\n    try {\n        pyProjectFileToml = toml.parse(pyProjectFile);\n        newPyProjectFile = processPyProjectAndVersion(\n            pyProjectFileToml,\n            versions,\n        );\n    } catch (_) {\n        return { content: \"\", hasError: true };\n    }\n\n    return {\n        content: toml.stringify(newPyProjectFile).replace(/\" {2}\"/g, \"\"),\n        hasError: false,\n    };\n}\n","import * as React from \"react\";\n\ninterface Props {\n    hasAlert?: boolean;\n    id?: string;\n    message?: string;\n}\n\nconst AlertBar: React.FunctionComponent<Props> = props => {\n    if (props.hasAlert) {\n        return (\n            <p className=\"alert alert-danger\" role=\"alert\" id={props.id}>\n                {props.message}\n            </p>\n        );\n    } else {\n        return <></>;\n    }\n};\n\nexport default AlertBar;\n","import React from \"react\";\nimport slugify from \"slugify\";\n\ninterface Props {\n    title: string;\n    value: string;\n    onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    readOnly?: boolean;\n}\n\nconst InputArea: React.FunctionComponent<Props> = props => {\n    const labelId =\n        slugify(props.title || \"\", {\n            lower: true,\n            remove: /[.]/g,\n        }) + \"-label\";\n    const textAreaId =\n        slugify(props.title || \"\", { lower: true, remove: /[.]/g }) +\n        \"-textarea\";\n    return (\n        <>\n            <label htmlFor={textAreaId} className=\"form-label\" id={labelId}>\n                {props.title}\n            </label>\n            <textarea\n                className=\"form-control\"\n                id={textAreaId}\n                value={props.value}\n                onChange={props.onChange}\n                rows={30}\n                readOnly={props.readOnly || false}\n            ></textarea>\n        </>\n    );\n};\n\nexport default InputArea;\n","import * as React from \"react\";\n\nimport AlertBar from \"./alertBar\";\nimport InputArea from \"./inputArea\";\nimport slugify from \"slugify\";\n\ninterface Props {\n    hasAlert?: boolean;\n    alertMessage?: string;\n    title: string;\n    value: string;\n    onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    readOnly?: boolean;\n}\n\nconst ColArea: React.FunctionComponent<Props> = props => {\n    const alertId =\n        slugify(props.title || \"\", {\n            lower: true,\n            remove: /[.]/g,\n        }) + \"-alert\";\n    return (\n        <div className=\"col\">\n            <AlertBar\n                hasAlert={props.hasAlert}\n                message={props.alertMessage}\n                id={alertId}\n            />\n            <div className=\"mb-3\">\n                <InputArea\n                    title={props.title}\n                    value={props.value}\n                    onChange={props.onChange}\n                    readOnly={props.readOnly || false}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ColArea;\n","import { useEffect, useState } from \"react\";\nimport { pyProjectData, versionsData } from \"./exampleData\";\nimport { producePinnedVersions } from \"./businessRules\";\nimport ColArea from \"./components/colArea\";\n\nconst App = () => {\n    const [pyProjectFile, SetPyProjectFile] = useState(pyProjectData);\n    const [newPyProjectFile, SetNewPyProjectFile] = useState(pyProjectData);\n    const [isPyProjectFileWithProblem, SetIsPyProjectFileWithProblem] =\n        useState(false);\n    const [versions, SetVersions] = useState(versionsData);\n\n    function pyProjectFileHandleChange(event) {\n        SetPyProjectFile(event.target.value);\n    }\n    function versionsHandleChange(event) {\n        SetVersions(event.target.value);\n    }\n\n    useEffect(() => {\n        const { content, hasError } = producePinnedVersions(\n            pyProjectFile,\n            versions,\n        );\n        SetIsPyProjectFileWithProblem(hasError);\n        SetNewPyProjectFile(content);\n    }, [pyProjectFile, versions]);\n\n    return (\n        <div className=\"row\">\n            <ColArea\n                title=\"PyProject.toml\"\n                value={pyProjectFile}\n                onChange={pyProjectFileHandleChange}\n                hasAlert={isPyProjectFileWithProblem}\n                alertMessage=\"PyProject.toml with problem.\"\n            />\n            <ColArea\n                title=\"poetry show\"\n                value={versions}\n                onChange={versionsHandleChange}\n            />\n            <ColArea\n                title=\"New PyProject.toml\"\n                value={newPyProjectFile}\n                readOnly={true}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}