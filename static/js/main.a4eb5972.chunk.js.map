{"version":3,"sources":["exampleData.js","businessRules.js","components/alertBar.jsx","suggestPyProjectPackageVersionUpdate.jsx","App.js","reportWebVitals.js","index.js"],"names":["pyProjectData","canUpdateDependency","dependency","dependencies","regexList","RegExp","i","length","dependencySpecification","test","push","join","discoveryDependencySpecification","includes","processDependency","section","version","pyProjectFileToml","tool","poetry","processPyProjectAndVersion","versions","currentDependenciesVersions","forEach","processDependencyList","split","filter","value","splitTextLinesIntoList","map","replace","slice","AlertBar","props","isPyProjectFileWithProblem","className","role","message","SuggestPyProjectPackageVersionUpdate","useState","pyProjectFile","SetPyProjectFile","newPyProjectFile","SetNewPyProjectFile","SetIsPyProjectFileWithProblem","SetVersions","useEffect","toml","parse","stringify","replaceAll","producePinnedVersions","_","htmlFor","id","onChange","event","target","rows","readOnly","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4eb5972.chunk.js","sourcesContent":["export const pyProjectData = `\n[tool.poetry]\nname = \"testing_poetry\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Bernardo Gomes <bgomesdeabreu@gmail.com>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.8\"\nrequests = \">=2.24.0\"\nurllib3 = \"*\"\nchardet = \">=1.0.0\"\ncertifi = \"<2020.12.5\"\n\n[tool.poetry.dev-dependencies]\nrequests = \"^2.24.0\"\npytest = \">=6.0.0\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n`;\n\nexport const versionsData = `\ncertifi  2020.12.5 Python package for providing Mozilla's CA Bundle.\nchardet  3.0.4     Universal encoding detector for Python 2 and 3\nidna  2.10      Internationalized Domain Names in Applications (IDNA)\nrequests 2.25.1    Python HTTP for Humans.\nurllib3  1.25.11   HTTP library with thread-safe connection pooling, file post, and more.\npytest  6.2.5   pytest simple powerful testing with Python\n`;\n","export function discoveryDependencySpecification(dependency) {\n  const regexList = [\n    [\">=\", new RegExp(\"^>=\\\\w\")],\n    [\">\", new RegExp(\"^>\\\\w\")],\n    [\"<=\", new RegExp(\"^<=\\\\w\")],\n    [\"<\", new RegExp(\"^<\\\\w\")],\n    [\"!=\", new RegExp(\"^!=\\\\w\")],\n    [\"^\", new RegExp(\"^\\\\^\\\\w\")],\n    [\"~\", new RegExp(\"^~\\\\w\")],\n    [\"*\", new RegExp(\"^\\\\*\")],\n  ];\n\n  let dependencies = [];\n  for (let i = 0; i < regexList.length; i++) {\n    const [dependencySpecification, regex] = regexList[i];\n    if (regex.test(dependency)) {\n      dependencies.push(dependencySpecification);\n    }\n  }\n  return dependencies.join(\", \");\n}\n\nexport function canChangeDependencySpecification(dependencyDiscovered) {\n  return [\">=\", \"*\"].includes(dependencyDiscovered);\n}\n\nexport function canUpdateDependency(dependency) {\n  const dependencies = discoveryDependencySpecification(dependency);\n  return canChangeDependencySpecification(dependencies);\n}\n\nexport function splitTextLinesIntoList(versions) {\n  return removeEmptyString(versions.split(\"\\n\"));\n}\n\nexport function removeEmptyString(stringList) {\n  return stringList.filter((value) => !!value);\n}\n\nexport function getNameAndVersionOfEachDependency(stringList) {\n  return stringList.map((value) => {\n    return value.replace(/\\s+/g, \" \").split(\" \").slice(0, 2);\n  });\n}\n\nexport function processDependency(\n  dependency,\n  section,\n  version,\n  pyProjectFileToml\n) {\n  if (\n    dependency in pyProjectFileToml.tool.poetry[section] &&\n    canUpdateDependency(pyProjectFileToml.tool.poetry[section][dependency])\n  ) {\n    pyProjectFileToml.tool.poetry[section][dependency] = `>=${version}`;\n  }\n  return pyProjectFileToml;\n}\n\nexport function processDependencyList(\n  pyProjectFileToml,\n  currentDependenciesVersions\n) {\n  currentDependenciesVersions.forEach(([dependency, version]) => {\n    processDependency(dependency, \"dependencies\", version, pyProjectFileToml);\n    processDependency(\n      dependency,\n      \"dev-dependencies\",\n      version,\n      pyProjectFileToml\n    );\n  });\n\n  return pyProjectFileToml;\n}\n\nexport function processPyProjectAndVersion(pyProjectFileToml, versions) {\n  const versionsList = getNameAndVersionOfEachDependency(\n    splitTextLinesIntoList(versions)\n  );\n  return processDependencyList(pyProjectFileToml, versionsList);\n}\n","export default function AlertBar(props) {\n  if (props.isPyProjectFileWithProblem) {\n    return (\n      <p className=\"alert alert-danger\" role=\"alert\">\n        {props.message}\n      </p>\n    );\n  } else {\n    return \"\";\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport toml from \"@iarna/toml\";\nimport { pyProjectData, versionsData } from \"./exampleData\";\nimport { processPyProjectAndVersion } from \"./businessRules\";\nimport AlertBar from \"./components/alertBar\";\n\nconst SuggestPyProjectPackageVersionUpdate = () => {\n  const [pyProjectFile, SetPyProjectFile] = useState(pyProjectData);\n  const [newPyProjectFile, SetNewPyProjectFile] = useState(pyProjectData);\n  const [isPyProjectFileWithProblem, SetIsPyProjectFileWithProblem] =\n    useState(false);\n  const [versions, SetVersions] = useState(versionsData);\n\n  function pyProjectFileHandleChange(event) {\n    SetPyProjectFile(event.target.value);\n  }\n  function versionsHandleChange(event) {\n    SetVersions(event.target.value);\n  }\n\n  useEffect(() => {\n    function producePinnedVersions(pyProjectFileToml) {\n      const newPyProjectFile = processPyProjectAndVersion(\n        pyProjectFileToml,\n        versions\n      );\n\n      return toml.stringify(newPyProjectFile).replaceAll(\"  \", \"\");\n    }\n\n    try {\n      const pyProjectFileToml = toml.parse(pyProjectFile);\n      SetIsPyProjectFileWithProblem(false);\n      SetNewPyProjectFile(producePinnedVersions(pyProjectFileToml));\n    } catch (_) {\n      SetIsPyProjectFileWithProblem(true);\n    }\n  }, [pyProjectFile, versions]);\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <AlertBar\n          isPyProjectFileWithProblem={isPyProjectFileWithProblem}\n          message=\"PyProject.toml with problem.\"\n        />\n        <div className=\"mb-3\">\n          <label htmlFor=\"pyProjectToml\" className=\"form-label\">\n            PyProject.toml\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"pyProjectToml\"\n            value={pyProjectFile}\n            onChange={pyProjectFileHandleChange}\n            rows=\"20\"\n          ></textarea>\n        </div>\n      </div>\n      <div className=\"col\">\n        <div className=\"mb-3\">\n          <label htmlFor=\"poetryShow\" className=\"form-label\">\n            poetry show\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"poetryShow\"\n            value={versions}\n            onChange={versionsHandleChange}\n            rows=\"20\"\n          ></textarea>\n        </div>\n      </div>\n      <div className=\"col\">\n        <div className=\"mb-3\">\n          <label htmlFor=\"result\" className=\"form-label\">\n            New PyProject.toml\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"dependencies\"\n            value={newPyProjectFile}\n            readOnly\n            rows=\"30\"\n          ></textarea>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SuggestPyProjectPackageVersionUpdate;\n","import \"./App.css\";\nimport SuggestPyProjectPackageVersionUpdate from \"./suggestPyProjectPackageVersionUpdate.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <SuggestPyProjectPackageVersionUpdate />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}